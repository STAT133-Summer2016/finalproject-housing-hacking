n = 1
height = dim(m)[1]
width = dim(m)[2]
#move red
red_cars = m * (m==1)
none_blocked = (cbind(m[,2:width],m[,1])==0)
moveable = none_blocked*red_cars
moved = cbind(moveable[,width],moveable[,1:(width-1)])
output = m - moveable + moved
#move blue
blue_cars = output * (output==2)
none_blocked = (rbind(output[2:height,],output[1,])==0)
moveable = none_blocked*blue_cars
moved = rbind(moveable[height,],moveable[1:(height-1),])
output = output - moveable + moved
return(list(output,!identical(m,output)))
}
m <- matrix(c(1,0,0,0,2,1,2,0,0,2,0,1,1,0,1,2,0,1,2,1,0,0,1,1,2), nrow = 5, ncol = 5, byrow = T)
identical(moveCars(m), list(matrix(c(0,1,0,0,2,1,2,0,0,2,1,1,0,1,0,2,0,1,2,1,0,0,1,1,2), nrow = 5, ncol = 5, byrow = T), TRUE))
m
moveCars(m)
matrix(c(0,1,0,0,2,1,2,0,0,2,1,1,0,1,0,2,0,1,2,1,0,0,1,1,2), nrow = 5, ncol = 5, byrow = T)
moveCars = function(m){
n = 1
height = dim(m)[1]
width = dim(m)[2]
#move red
red_cars = m * (m==1)
none_blocked = (cbind(m[,2:width],m[,1])==0)
moveable = none_blocked*red_cars
moved = cbind(moveable[,width],moveable[,1:(width-1)])
output = m - moveable + moved
#move blue
blue_cars = output * (output==2)
none_blocked = (rbind(output[height,],output[1:(height-1),])==0)
moveable = none_blocked*blue_cars
moved = rbind(moveable[2:(height-1),],moveable[1,])
output = output - moveable + moved
return(list(output,!identical(m,output)))
}
m <- matrix(c(1,0,0,0,2,1,2,0,0,2,0,1,1,0,1,2,0,1,2,1,0,0,1,1,2), nrow = 5, ncol = 5, byrow = T)
identical(moveCars(m), list(matrix(c(0,1,0,0,2,1,2,0,0,2,1,1,0,1,0,2,0,1,2,1,0,0,1,1,2), nrow = 5, ncol = 5, byrow = T), TRUE))
moveCars = function(m){
n = 1
height = dim(m)[1]
width = dim(m)[2]
#move red
red_cars = m * (m==1)
none_blocked = (cbind(m[,2:width],m[,1])==0)
moveable = none_blocked*red_cars
moved = cbind(moveable[,width],moveable[,1:(width-1)])
output = m - moveable + moved
#move blue
output
blue_cars = output * (output==2)
none_blocked = (rbind(output[height,],output[1:(height-1),])==0)
none_blocked
moveable = none_blocked*blue_cars
moveable
moved = rbind(moveable[2:(height-1),],moveable[1,])
moved
output = output - moveable + moved
return(list(output,!identical(m,output)))
}
m <- matrix(c(1,0,0,0,2,1,2,0,0,2,0,1,1,0,1,2,0,1,2,1,0,0,1,1,2), nrow = 5, ncol = 5, byrow = T)
identical(moveCars(m), list(matrix(c(0,1,0,0,2,1,2,0,0,2,1,1,0,1,0,2,0,1,2,1,0,0,1,1,2), nrow = 5, ncol = 5, byrow = T), TRUE))
moveCars = function(m){
n = 1
height = dim(m)[1]
width = dim(m)[2]
#move red
red_cars = m * (m==1)
none_blocked = (cbind(m[,2:width],m[,1])==0)
moveable = none_blocked*red_cars
moved = cbind(moveable[,width],moveable[,1:(width-1)])
output = m - moveable + moved
#move blue
output
blue_cars = output * (output==2)
none_blocked = (rbind(output[height,],output[1:(height-1),])==0)
none_blocked
moveable = none_blocked*blue_cars
moveable
moved = rbind(moveable[2:(height-1),],moveable[1,])
moved
#output = output - moveable + moved
return(list(output,!identical(m,output)))
}
m <- matrix(c(1,0,0,0,2,1,2,0,0,2,0,1,1,0,1,2,0,1,2,1,0,0,1,1,2), nrow = 5, ncol = 5, byrow = T)
identical(moveCars(m), list(matrix(c(0,1,0,0,2,1,2,0,0,2,1,1,0,1,0,2,0,1,2,1,0,0,1,1,2), nrow = 5, ncol = 5, byrow = T), TRUE))
moveCars = function(m){
n = 1
height = dim(m)[1]
width = dim(m)[2]
#move red
red_cars = m * (m==1)
none_blocked = (cbind(m[,2:width],m[,1])==0)
moveable = none_blocked*red_cars
moved = cbind(moveable[,width],moveable[,1:(width-1)])
output = m - moveable + moved
#move blue
output
blue_cars = output * (output==2)
none_blocked = (rbind(output[height,],output[1:(height-1),])==0)
print(none_blocked)
moveable = none_blocked*blue_cars
print(moveable)
moved = rbind(moveable[2:(height-1),],moveable[1,])
print(moved)
#output = output - moveable + moved
return(list(output,!identical(m,output)))
}
m <- matrix(c(1,0,0,0,2,1,2,0,0,2,0,1,1,0,1,2,0,1,2,1,0,0,1,1,2), nrow = 5, ncol = 5, byrow = T)
identical(moveCars(m), list(matrix(c(0,1,0,0,2,1,2,0,0,2,1,1,0,1,0,2,0,1,2,1,0,0,1,1,2), nrow = 5, ncol = 5, byrow = T), TRUE))
moveCars = function(m){
n = 1
height = dim(m)[1]
width = dim(m)[2]
#move red
red_cars = m * (m==1)
none_blocked = (cbind(m[,2:width],m[,1])==0)
moveable = none_blocked*red_cars
moved = cbind(moveable[,width],moveable[,1:(width-1)])
output = m - moveable + moved
#move blue
print(output)
blue_cars = output * (output==2)
print(blue_cars)
none_blocked = (rbind(output[height,],output[1:(height-1),])==0)
print(none_blocked)
moveable = none_blocked*blue_cars
print(moveable)
moved = rbind(moveable[2:(height-1),],moveable[1,])
print(moved)
#output = output - moveable + moved
return(list(output,!identical(m,output)))
}
m <- matrix(c(1,0,0,0,2,1,2,0,0,2,0,1,1,0,1,2,0,1,2,1,0,0,1,1,2), nrow = 5, ncol = 5, byrow = T)
moveCars(m)
m
m <- matrix(c(1,0,0,0,2,1,2,0,0,2,0,1,1,0,1,2,0,1,2,1,0,0,1,1,2), nrow = 5, ncol = 5, byrow = T)
moveCars = function(m){
n = 1
height = dim(m)[1]
width = dim(m)[2]
#move red
red_cars = m * (m==1)
none_blocked = (cbind(m[,2:width],m[,1])==0)
moveable = none_blocked*red_cars
moved = cbind(moveable[,width],moveable[,1:(width-1)])
output = m - moveable + moved
#move blue
#print(output)
blue_cars = output * (output==2)
#print(blue_cars)
none_blocked = (rbind(output[height,],output[1:(height-1),])==0)
#print(none_blocked)
moveable = none_blocked*blue_cars
#print(moveable)
moved = rbind(moveable[2:height,],moveable[1,])
#print(moved)
output = output - moveable + moved
return(list(output,!identical(m,output)))
}
m <- matrix(c(1,0,0,0,2,1,2,0,0,2,0,1,1,0,1,2,0,1,2,1,0,0,1,1,2), nrow = 5, ncol = 5, byrow = T)
identical(moveCars(m), list(matrix(c(0,1,0,0,2,1,2,0,0,2,1,1,0,1,0,2,0,1,2,1,0,0,1,1,2), nrow = 5, ncol = 5, byrow = T), TRUE))
m <-  matrix(c(0,1,0,2,1), nrow = 1, ncol = 5, byrow = T)
m
matrix(c(1,0,1,2,0)
, nrow = 1, ncol = 5, byrow = T)
moveCars = function(m){
n = 1
height = dim(m)[1]
width = dim(m)[2]
#move red
if(width != 1){
red_cars = m * (m==1)
none_blocked = (cbind(m[,2:width],m[,1])==0)
moveable = none_blocked*red_cars
moved = cbind(moveable[,width],moveable[,1:(width-1)])
output = m - moveable + moved
}
#move blue
if(height != 1){
blue_cars = output * (output==2)
none_blocked = (rbind(output[height,],output[1:(height-1),])==0)
moveable = none_blocked*blue_cars
moved = rbind(moveable[2:height,],moveable[1,])
output = output - moveable + moved
}
return(list(output,!identical(m,output)))
}
m <-  matrix(c(0,1,0,2,1), nrow = 1, ncol = 5, byrow = T)
identical(moveCars(m), list(matrix(c(1,0,1,2,0), nrow = 1, ncol = 5, byrow = T), TRUE))
moveCars = function(m){
n = 1
height = dim(m)[1]
width = dim(m)[2]
#move red
if(width != 1){
red_cars = m * (m==1)
none_blocked = (cbind(m[,2:width],m[,1])==0)
print(none_blocked)
moveable = none_blocked*red_cars
moved = cbind(moveable[,width],moveable[,1:(width-1)])
output = m - moveable + moved
}
#move blue
if(height != 1){
blue_cars = output * (output==2)
none_blocked = (rbind(output[height,],output[1:(height-1),])==0)
moveable = none_blocked*blue_cars
moved = rbind(moveable[2:height,],moveable[1,])
output = output - moveable + moved
}
return(list(output,!identical(m,output)))
}
moveCars(m)
m
cbind(m[,2:width],m[,1])
cbind(m[,2:dim(m)[2]],m[,1])
dim(m)
cbind(m[,2:dim(m)[2]],m[,1])
m[,2:dim(m)[2]]
m[1]
red_cars = m * (m==1)
red_cars
?matrix
matrix((m[,2:dim(m)[2]],m[,1]))
matrix(c(m[,2:dim(m)[2]],m[,1]))
matrix(c(m[,2:dim(m)[2]],m[,1]),byrow = T)
matrix(c(m[,2:dim(m)[2]],m[,1]),byrow = F)
m
t(matrix(c(m[,2:dim(m)[2]],m[,1])))
moveCars = function(m){
n = 1
height = dim(m)[1]
width = dim(m)[2]
#move red
if(width != 1){
red_cars = m * (m==1)
if(height == 1){
none_blocked = matrix(c(m[,2:width],m[,1]))
} else{
none_blocked = (cbind(m[,2:width],m[,1])==0)
}
print(none_blocked)
moveable = none_blocked*red_cars
moved = cbind(moveable[,width],moveable[,1:(width-1)])
output = m - moveable + moved
}
#move blue
if(height != 1){
blue_cars = output * (output==2)
none_blocked = (rbind(output[height,],output[1:(height-1),])==0)
moveable = none_blocked*blue_cars
moved = rbind(moveable[2:height,],moveable[1,])
output = output - moveable + moved
}
return(list(output,!identical(m,output)))
}
m <-  matrix(c(0,1,0,2,1), nrow = 1, ncol = 5, byrow = T)
identical(moveCars(m), list(matrix(c(1,0,1,2,0), nrow = 1, ncol = 5, byrow = T), TRUE))
red_cars
moveCars = function(m){
n = 1
height = dim(m)[1]
width = dim(m)[2]
#move red
if(width != 1){
red_cars = m * (m==1)
if(height == 1){
none_blocked = t(matrix(c(m[,2:width],m[,1]))) == 0
} else{
none_blocked = (cbind(m[,2:width],m[,1])==0)
}
print(none_blocked)
moveable = none_blocked*red_cars
if(height != 1){
moved = cbind(moveable[,width],moveable[,1:(width-1)])
} else {
moved = t(matrix(c(moveable[,width],moveable[,1:(width-1)])))
}
output = m - moveable + moved
}
#move blue
if(height != 1){
blue_cars = output * (output==2)
none_blocked = (rbind(output[height,],output[1:(height-1),])==0)
moveable = none_blocked*blue_cars
moved = rbind(moveable[2:height,],moveable[1,])
output = output - moveable + moved
}
return(list(output,!identical(m,output)))
}
m <-  matrix(c(0,1,0,2,1), nrow = 1, ncol = 5, byrow = T)
identical(moveCars(m), list(matrix(c(1,0,1,2,0), nrow = 1, ncol = 5, byrow = T), TRUE))
m <- matrix(c(2,0,1,2,0), nrow = 5, ncol = 1, byrow = T)
m
rbind(m[height,],m[1:(height-1),])
rbind(m[5,],m[1:(5-1),])
c(m[5,],m[1:(5-1),])
matrixc(m[5,],m[1:(5-1),])
matrix(c(m[5,],m[1:(5-1),]))
moveCars = function(m){
n = 1
height = dim(m)[1]
width = dim(m)[2]
#move red
if(width != 1){
red_cars = m * (m==1)
if(height == 1){
none_blocked = t(matrix(c(m[,2:width],m[,1]))) == 0
} else{
none_blocked = (cbind(m[,2:width],m[,1])==0)
}
moveable = none_blocked*red_cars
if(height != 1){
moved = cbind(moveable[,width],moveable[,1:(width-1)])
} else {
moved = t(matrix(c(moveable[,width],moveable[,1:(width-1)])))
}
output = m - moveable + moved
}
#move blue
if(height != 1){
blue_cars = output * (output==2)
if(width == 1){
none_blocked = (matrix(c(output[height,],output[1:(height-1),]))==0)
} else {
none_blocked = (rbind(output[height,],output[1:(height-1),])==0)
}
moveable = none_blocked*blue_cars
if(width == 1){
moved = matrix(c(moveable[2:height,],moveable[1,]))
}else {
moved = rbind(moveable[2:height,],moveable[1,])
}
output = output - moveable + moved
}
return(list(output,!identical(m,output)))
}
m <- matrix(c(2,0,1,2,0), nrow = 5, ncol = 1, byrow = T)
identical(moveCars(m), list(matrix(c(0,0,1,2,2), nrow = 5, ncol = 1, byrow = T), TRUE))
moveCars = function(m){
n = 1
height = dim(m)[1]
width = dim(m)[2]
#move red
if(width != 1){
red_cars = m * (m==1)
if(height == 1){
none_blocked = t(matrix(c(m[,2:width],m[,1]))) == 0
} else{
none_blocked = (cbind(m[,2:width],m[,1])==0)
}
moveable = none_blocked*red_cars
if(height != 1){
moved = cbind(moveable[,width],moveable[,1:(width-1)])
} else {
moved = t(matrix(c(moveable[,width],moveable[,1:(width-1)])))
}
output = m - moveable + moved
} else{
output = m
}
#move blue
if(height != 1){
blue_cars = output * (output==2)
if(width == 1){
none_blocked = (matrix(c(output[height,],output[1:(height-1),]))==0)
} else {
none_blocked = (rbind(output[height,],output[1:(height-1),])==0)
}
moveable = none_blocked*blue_cars
if(width == 1){
moved = matrix(c(moveable[2:height,],moveable[1,]))
}else {
moved = rbind(moveable[2:height,],moveable[1,])
}
output = output - moveable + moved
}
return(list(output,!identical(m,output)))
}
m <- matrix(c(2,0,1,2,0), nrow = 5, ncol = 1, byrow = T)
identical(moveCars(m), list(matrix(c(0,0,1,2,2), nrow = 5, ncol = 1, byrow = T), TRUE))
moveCars = function(m){
n = 1
height = dim(m)[1]
width = dim(m)[2]
#move red
if(width != 1){
red_cars = m * (m==1)
if(height == 1){
none_blocked = t(matrix(c(m[,2:width],m[,1]))) == 0
} else{
none_blocked = (cbind(m[,2:width],m[,1])==0)
}
moveable = none_blocked*red_cars
if(height != 1){
moved = cbind(moveable[,width],moveable[,1:(width-1)])
} else {
moved = t(matrix(c(moveable[,width],moveable[,1:(width-1)])))
}
output = m - moveable + moved
} else{
output = m
}
#move blue
if(height != 1){
blue_cars = output * (output==2)
if(width == 1){
none_blocked = (matrix(c(output[height,],output[1:(height-1),]))==0)
} else {
none_blocked = (rbind(output[height,],output[1:(height-1),])==0)
}
moveable = none_blocked*blue_cars
if(width == 1){
moved = matrix(c(moveable[2:height,],moveable[1,]))
}else {
moved = rbind(moveable[2:height,],moveable[1,])
}
output = output - moveable + moved
}
not_gridlocked = !identical(m,output)
m = output
return(list(m,not_gridlocked))
}
?matrix
?sample
initGrid = function(r, c, d){
m = matrix(sample(c(0,1,2),c*r,replace = T,prob = c(1-d,d/2,d/2)),
nrow = r,
ncol =c)
return(m)
}
initGrid(5,5,1/3)
initGrid(5,5,1/3)
initGrid(5,5,1/3)
initGrid(5,5,1/3)
initGrid(5,5,1/3)
initGrid(5,5,1/3)
initGrid(5,5,1/3)
initGrid(5,5,1/3)
initGrid(5,5,1/3)
initGrid(5,5,1/3)
initGrid(5,5,1/3)
initGrid(5,5,1/3)
initGrid(5,5,1/3)
initGrid(5,5,1/3)
initGrid(5,5,1/3)
initGrid(10,10,1/3)
initGrid(10,10,2/3)
initGrid(10,10,8/10)
initGrid(10,10,8/10)
initGrid(10,10,9/10)
initGrid(10,10,9/10)
initGrid(10,10,9/10)
initGrid(10,10,9/10)
initGrid(10,10,9/10)
initGrid(10,10,9/10)
initGrid(10,10,9/10)
initGrid(10,10,9/10)
library(dplyr)
install.packages("purrr")
library(purrr)
set.seed(1994)
df <- matrix(rnorm(25), 5) %>% data.frame %>% setNames(letters[1:5])
df
x1 <- list(
c(0.27, 0.37, 0.57, 0.91, 0.20),
c(0.90, 0.94, 0.66, 0.63, 0.06),
c(0.21, 0.18, 0.69, 0.38, 0.77)
)
x2 <- list(
c(0.50, 0.72, 0.99, 0.38, 0.78),
c(0.93, 0.21, 0.65, 0.13, 0.27),
c(0.39, 0.01, 0.38, 0.87, 0.34)
)
threshold <- function(x, cutoff = 0.8) x[x > cutoff]
x1 %>% sapply(threshold) %>% str
x2 %>% sapply(threshold) %>% str
x1 %>% vapply(mean, numeric(1))
x1 %>% map_dbl(mean)
x1 %>% map_dbl(mean, trim = 0.25)
planes <- nycflights13::planes
df %>%
map_lgl(is.numeric)
df %>%
map_chr(typeof)
df
df %>%
map(summary)
df %>% map(function(x) sum(is.na(x)))
df %>% map(~ sum(is.na(.)))
df %>% map(~ .x %>% is.na %>% sum)
my_list <- list(
list(a = 1, b = "a"),
list(a = 2, b = "b"),
list(a = 3, b = "c")
)
my_list %>% map_dbl(function(x) x[["a"]])
my_list %>% map_dbl("a")
my_list %>% map_dbl(1)
models <- mtcars %>% split(mtcars$cyl) %>% map(~ lm(mpg ~ wt, data = .x))
coefficients <- models %>% map(coef)
coefficients %>% map_dbl("wt")
install.packages("purrr")
install.packages("purrr")
library(purrr)
?safely()
?map
